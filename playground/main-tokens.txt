Token { token_type: Keyword(Procedure), lexeme: "procedure", line: 1, column: 1 }
Token { token_type: Identifier("greet_times"), lexeme: "greet_times", line: 1, column: 12 }
Token { token_type: Delimiter(LeftParenthesis), lexeme: "(", line: 1, column: 23 }
Token { token_type: Identifier("name"), lexeme: "name", line: 1, column: 25 }
Token { token_type: Operator(Arrow), lexeme: "->", line: 1, column: 30 }
Token { token_type: Keyword(StrType), lexeme: "string", line: 1, column: 34 }
Token { token_type: Delimiter(Comma), lexeme: ",", line: 1, column: 40 }
Token { token_type: Identifier("times"), lexeme: "times", line: 1, column: 43 }
Token { token_type: Operator(Arrow), lexeme: "->", line: 1, column: 49 }
Token { token_type: Keyword(NumType), lexeme: "number", line: 1, column: 53 }
Token { token_type: Delimiter(RightParenthesis), lexeme: ")", line: 1, column: 59 }
Token { token_type: Delimiter(LeftBrace), lexeme: "{", line: 1, column: 61 }
Token { token_type: Keyword(Define), lexeme: "define", line: 2, column: 4 }
Token { token_type: Identifier("i"), lexeme: "i", line: 2, column: 12 }
Token { token_type: Operator(Assign), lexeme: ":=", line: 2, column: 13 }
Token { token_type: Identifier("times"), lexeme: "times", line: 2, column: 17 }
Token { token_type: Delimiter(StatementEnd), lexeme: ";", line: 2, column: 22 }
Token { token_type: Keyword(Loop), lexeme: "loop", line: 3, column: 4 }
Token { token_type: Delimiter(LeftBrace), lexeme: "{", line: 3, column: 9 }
Token { token_type: Keyword(When), lexeme: "when", line: 4, column: 6 }
Token { token_type: Identifier("i"), lexeme: "i", line: 4, column: 12 }
Token { token_type: Operator(Is), lexeme: "is", line: 4, column: 15 }
Token { token_type: Literal(NumberLiteral(0.0)), lexeme: "0", line: 4, column: 19 }
Token { token_type: Delimiter(LeftBrace), lexeme: "{", line: 4, column: 21 }
Token { token_type: Keyword(Leave), lexeme: "leave", line: 5, column: 8 }
Token { token_type: Delimiter(StatementEnd), lexeme: ";", line: 5, column: 13 }
Token { token_type: Delimiter(RightBrace), lexeme: "}", line: 6, column: 5 }
Token { token_type: Identifier("print"), lexeme: "print", line: 8, column: 6 }
Token { token_type: Delimiter(LeftParenthesis), lexeme: "(", line: 8, column: 11 }
Token { token_type: Literal(StringLiteral("Hello, {}")), lexeme: "\"Hello, {}\"", line: 8, column: 12 }
Token { token_type: Delimiter(Comma), lexeme: ",", line: 8, column: 23 }
Token { token_type: Identifier("name"), lexeme: "name", line: 8, column: 26 }
Token { token_type: Delimiter(RightParenthesis), lexeme: ")", line: 8, column: 30 }
Token { token_type: Delimiter(StatementEnd), lexeme: ";", line: 8, column: 31 }
Token { token_type: Identifier("i"), lexeme: "i", line: 9, column: 6 }
Token { token_type: Operator(Assign), lexeme: ":=", line: 9, column: 7 }
Token { token_type: Identifier("i"), lexeme: "i", line: 9, column: 11 }
Token { token_type: Operator(Minus), lexeme: "-", line: 9, column: 13 }
Token { token_type: Literal(NumberLiteral(1.0)), lexeme: "1", line: 9, column: 16 }
Token { token_type: Delimiter(StatementEnd), lexeme: ";", line: 9, column: 17 }
Token { token_type: Delimiter(RightBrace), lexeme: "}", line: 10, column: 3 }
Token { token_type: Delimiter(RightBrace), lexeme: "}", line: 11, column: 1 }
Token { token_type: Keyword(Procedure), lexeme: "procedure", line: 13, column: 2 }
Token { token_type: Identifier("main"), lexeme: "main", line: 13, column: 13 }
Token { token_type: Delimiter(LeftBrace), lexeme: "{", line: 13, column: 18 }
Token { token_type: Identifier("greet_times"), lexeme: "greet_times", line: 14, column: 4 }
Token { token_type: Delimiter(LeftParenthesis), lexeme: "(", line: 14, column: 15 }
Token { token_type: Literal(StringLiteral("Ziget")), lexeme: "\"Ziget\"", line: 14, column: 16 }
Token { token_type: Delimiter(Comma), lexeme: ",", line: 14, column: 23 }
Token { token_type: Literal(NumberLiteral(3.0)), lexeme: "3", line: 14, column: 26 }
Token { token_type: Delimiter(RightParenthesis), lexeme: ")", line: 14, column: 27 }
Token { token_type: Delimiter(StatementEnd), lexeme: ";", line: 14, column: 28 }
Token { token_type: Delimiter(RightBrace), lexeme: "}", line: 15, column: 1 }
